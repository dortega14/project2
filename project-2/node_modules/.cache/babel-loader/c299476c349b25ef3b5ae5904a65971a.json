{"ast":null,"code":"import { authenticateUser } from \"../utilities/api\";\nexport const loginTypes = {\n  LOGIN_SUCCESS: 'LOGIN_LOGIN_SUCCESS',\n  LOGIN_UNSUCCESS: 'LOGIN_LOGIN_UNSUCCESS'\n};\nexport const updateCurrentUser = (username, password) => async dispatch => {\n  let response = await authenticateUser(username, password);\n  clg;\n\n  switch (response.status) {\n    case 200:\n      dispatch({\n        type: loginTypes.LOGIN_SUCCESS,\n        payload: {\n          currUser: response.body\n        }\n      });\n      break;\n\n    case 401:\n      dispatch({\n        type: loginTypes.LOGIN_UNSUCCESS,\n        payload: {\n          loginMessege: response.loginMessege\n        }\n      });\n  }\n};","map":{"version":3,"sources":["E:/Documents/Revy/project2/project-2/src/action-mappers/login-actions.ts"],"names":["authenticateUser","loginTypes","LOGIN_SUCCESS","LOGIN_UNSUCCESS","updateCurrentUser","username","password","dispatch","response","clg","status","type","payload","currUser","body","loginMessege"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAGA,OAAO,MAAMC,UAAU,GAAG;AACtBC,EAAAA,aAAa,EAAE,qBADO;AAEtBC,EAAAA,eAAe,EAAE;AAFK,CAAnB;AAKP,OAAO,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAkBC,QAAlB,KACzB,MAAOC,QAAP,IAAwB;AAG5B,MAAIC,QAAY,GAAG,MAAMR,gBAAgB,CAACK,QAAD,EAAWC,QAAX,CAAzC;AACAG,EAAAA,GAAG;;AACH,UAAQD,QAAQ,CAACE,MAAjB;AACI,SAAK,GAAL;AACIH,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAACV,UAAU,CAACC,aADX;AAELU,QAAAA,OAAO,EAAC;AACJC,UAAAA,QAAQ,EAACL,QAAQ,CAACM;AADd;AAFH,OAAD,CAAR;AAMA;;AACJ,SAAK,GAAL;AACIP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAACV,UAAU,CAACE,eADX;AAELS,QAAAA,OAAO,EAAE;AACLG,UAAAA,YAAY,EAACP,QAAQ,CAACO;AADjB;AAFJ,OAAD,CAAR;AAVR;AAkBH,CAxBM","sourcesContent":["import { authenticateUser } from \"../utilities/api\";\r\nimport IUser from \"../model/IUser\";\r\n\r\nexport const loginTypes = {\r\n    LOGIN_SUCCESS: 'LOGIN_LOGIN_SUCCESS',\r\n    LOGIN_UNSUCCESS: 'LOGIN_LOGIN_UNSUCCESS'\r\n}\r\n\r\nexport const updateCurrentUser = (username:string, password:string) =>\r\n        async (dispatch:any) => {\r\n    \r\n\r\n    let response:any = await authenticateUser(username, password);\r\n    clg\r\n    switch (response.status) {\r\n        case 200:\r\n            dispatch({\r\n                type:loginTypes.LOGIN_SUCCESS,\r\n                payload:{\r\n                    currUser:response.body\r\n                }\r\n            });\r\n            break;\r\n        case 401:\r\n            dispatch({\r\n                type:loginTypes.LOGIN_UNSUCCESS,\r\n                payload: {\r\n                    loginMessege:response.loginMessege\r\n                }\r\n            })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}