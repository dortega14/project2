{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\palki\\\\OneDrive\\\\Documents\\\\Revy\\\\project2\\\\project-2\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\palki\\\\OneDrive\\\\Documents\\\\Revy\\\\project2\\\\project-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{updateProfile,getProfile}from\"../utilities/api\";export var profileTypes={SUCCESSFUL_GET_PROFILE:'PROFILE_SUCCESSFUL_GET_PROFILE',UNSUCCESSFUL_GET_PROFILE:'PROFILE_UNSUCCESSFUL_GET_PROFILE',SUCCESSFUL_UPDATE_PROFILE:'PROFILE_SUCCESSFUL_UPDATE_PROFILE',UNSUCCESSFUL_UPDATE_PROFILE:'PROFILE_UNSUCCESSFUL_UPDATE_PROFILE',LOGOUT_REMOVE_PROFILE:'PROFILE_LOGOUT_REMOVE_PROFILE'};export var updateBio=function updateBio(profile){return(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return updateProfile(profile);case 2:response=_context.sent;if(response.status===202){dispatch({type:profileTypes.SUCCESSFUL_UPDATE_PROFILE,payload:{profile:profile}});}else{dispatch({type:profileTypes.UNSUCCESSFUL_UPDATE_PROFILE,payload:{}});}case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};export var getBio=function getBio(user){return(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getProfile(user);case 2:response=_context2.sent;if(response.body){dispatch({type:profileTypes.SUCCESSFUL_GET_PROFILE,payload:{profile:response.body}});}else{dispatch({type:profileTypes.UNSUCCESSFUL_GET_PROFILE,payload:{}});}case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());};export var logout=function logout(){return function(dispatch){dispatch({type:profileTypes.LOGOUT_REMOVE_PROFILE,payload:{}});};};","map":{"version":3,"sources":["C:/Users/palki/OneDrive/Documents/Revy/project2/project-2/src/action-mappers/profile-actions.ts"],"names":["updateProfile","getProfile","profileTypes","SUCCESSFUL_GET_PROFILE","UNSUCCESSFUL_GET_PROFILE","SUCCESSFUL_UPDATE_PROFILE","UNSUCCESSFUL_UPDATE_PROFILE","LOGOUT_REMOVE_PROFILE","updateBio","profile","dispatch","response","status","type","payload","getBio","user","body","logout"],"mappings":"ySACA,OAASA,aAAT,CAAwBC,UAAxB,KAA0C,kBAA1C,CAIA,MAAO,IAAMC,CAAAA,YAAY,CAAG,CACxBC,sBAAsB,CAAE,gCADA,CAExBC,wBAAwB,CAAE,kCAFF,CAGxBC,yBAAyB,CAAE,mCAHH,CAIxBC,2BAA2B,CAAE,qCAJL,CAKxBC,qBAAqB,CAAE,+BALC,CAArB,CAQP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,OAAD,kGAAuB,iBAAOC,QAAP,qJACnBV,CAAAA,aAAa,CAACS,OAAD,CADM,QACxCE,QADwC,eAG5C,GAAGA,QAAQ,CAACC,MAAT,GAAoB,GAAvB,CAA4B,CACxBF,QAAQ,CAAC,CACLG,IAAI,CAAEX,YAAY,CAACG,yBADd,CAELS,OAAO,CAAC,CACJL,OAAO,CAAPA,OADI,CAFH,CAAD,CAAR,CAMH,CAPD,IAOO,CACHC,QAAQ,CAAC,CACLG,IAAI,CAAEX,YAAY,CAACI,2BADd,CAELQ,OAAO,CAAE,EAFJ,CAAD,CAAR,CAMH,CAjB2C,sDAAvB,iEAAlB,CAoBP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,IAAD,mGAAiB,kBAAON,QAAP,0JACVT,CAAAA,UAAU,CAACe,IAAD,CADA,QAC/BL,QAD+B,gBAGnC,GAAGA,QAAQ,CAACM,IAAZ,CAAkB,CACdP,QAAQ,CAAC,CACLG,IAAI,CAACX,YAAY,CAACC,sBADb,CAELW,OAAO,CAAE,CACLL,OAAO,CAAEE,QAAQ,CAACM,IADb,CAFJ,CAAD,CAAR,CAMH,CAPD,IAOO,CACHP,QAAQ,CAAC,CACLG,IAAI,CAACX,YAAY,CAACE,wBADb,CAELU,OAAO,CAAE,EAFJ,CAAD,CAAR,CAMH,CAjBkC,wDAAjB,mEAAf,CAoBP,MAAO,IAAMI,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAM,UAACR,QAAD,CAAkB,CAC1CA,QAAQ,CAAC,CACLG,IAAI,CAAEX,YAAY,CAACK,qBADd,CAELO,OAAO,CAAE,EAFJ,CAAD,CAAR,CAMH,CAPqB,EAAf","sourcesContent":["import { IProfile } from \"../model/IProfile\"\r\nimport { updateProfile, getProfile } from \"../utilities/api\"\r\nimport IUser from \"../model/IUser\";\r\n\r\n\r\nexport const profileTypes = {\r\n    SUCCESSFUL_GET_PROFILE: 'PROFILE_SUCCESSFUL_GET_PROFILE',\r\n    UNSUCCESSFUL_GET_PROFILE: 'PROFILE_UNSUCCESSFUL_GET_PROFILE',\r\n    SUCCESSFUL_UPDATE_PROFILE: 'PROFILE_SUCCESSFUL_UPDATE_PROFILE',\r\n    UNSUCCESSFUL_UPDATE_PROFILE: 'PROFILE_UNSUCCESSFUL_UPDATE_PROFILE',\r\n    LOGOUT_REMOVE_PROFILE: 'PROFILE_LOGOUT_REMOVE_PROFILE'\r\n}\r\n\r\nexport const updateBio = (profile: IProfile) => async (dispatch:any) => {\r\n    let response:any = await updateProfile(profile);\r\n\r\n    if(response.status === 202) {\r\n        dispatch({\r\n            type: profileTypes.SUCCESSFUL_UPDATE_PROFILE,\r\n            payload:{\r\n                profile\r\n            }\r\n        });\r\n    } else {\r\n        dispatch({\r\n            type: profileTypes.UNSUCCESSFUL_UPDATE_PROFILE,\r\n            payload: {\r\n                \r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const getBio = (user: IUser) => async (dispatch:any) => {\r\n    let response:any = await getProfile(user);\r\n\r\n    if(response.body) {\r\n        dispatch({\r\n            type:profileTypes.SUCCESSFUL_GET_PROFILE,\r\n            payload: {\r\n                profile: response.body\r\n            }\r\n        });\r\n    } else {\r\n        dispatch({\r\n            type:profileTypes.UNSUCCESSFUL_GET_PROFILE,\r\n            payload: {\r\n\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch:any) => {\r\n    dispatch({\r\n        type: profileTypes.LOGOUT_REMOVE_PROFILE,\r\n        payload: {\r\n\r\n        }\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}