{"ast":null,"code":"import { authenticateUser } from \"../utilities/api\";\nexport const loginTypes = {\n  LOGIN_SUCCESS: 'LOGIN_LOGIN_SUCCESS',\n  LOGIN_UNSUCCESS: 'LOGIN_LOGIN_UNSUCCESS',\n  LOGOUT: 'LOGIN_LOGOUT'\n};\nexport const updateCurrentUser = (username, password) => async dispatch => {\n  let response = await authenticateUser(username, password); //console.log(response.data);\n\n  switch (response.status) {\n    case 202:\n      dispatch({\n        type: loginTypes.LOGIN_SUCCESS,\n        payload: {\n          currUser: response.data\n        }\n      });\n      break;\n\n    case 401:\n      dispatch({\n        type: loginTypes.LOGIN_UNSUCCESS,\n        payload: {\n          loginMessege: response.status + \" login failed!\"\n        }\n      });\n  }\n};","map":{"version":3,"sources":["C:/Users/rhlar/Downloads/project2-palk (1)/project2-palk/project-2/src/action-mappers/login-actions.ts"],"names":["authenticateUser","loginTypes","LOGIN_SUCCESS","LOGIN_UNSUCCESS","LOGOUT","updateCurrentUser","username","password","dispatch","response","status","type","payload","currUser","data","loginMessege"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAEA,OAAO,MAAMC,UAAU,GAAG;AACtBC,EAAAA,aAAa,EAAE,qBADO;AAEtBC,EAAAA,eAAe,EAAE,uBAFK;AAGtBC,EAAAA,MAAM,EAAE;AAHc,CAAnB;AAMP,OAAO,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAkBC,QAAlB,KACzB,MAAOC,QAAP,IAAwB;AAG5B,MAAIC,QAAY,GAAG,MAAMT,gBAAgB,CAACM,QAAD,EAAWC,QAAX,CAAzC,CAH4B,CAI5B;;AACA,UAAQE,QAAQ,CAACC,MAAjB;AACI,SAAK,GAAL;AACIF,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAACV,UAAU,CAACC,aADX;AAELU,QAAAA,OAAO,EAAC;AACJC,UAAAA,QAAQ,EAACJ,QAAQ,CAACK;AADd;AAFH,OAAD,CAAR;AAMA;;AACJ,SAAK,GAAL;AACIN,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAACV,UAAU,CAACE,eADX;AAELS,QAAAA,OAAO,EAAE;AACLG,UAAAA,YAAY,EAACN,QAAQ,CAACC,MAAT,GAAkB;AAD1B;AAFJ,OAAD,CAAR;AAVR;AAkBH,CAxBM","sourcesContent":["import { authenticateUser } from \"../utilities/api\";\n\nexport const loginTypes = {\n    LOGIN_SUCCESS: 'LOGIN_LOGIN_SUCCESS',\n    LOGIN_UNSUCCESS: 'LOGIN_LOGIN_UNSUCCESS',\n    LOGOUT: 'LOGIN_LOGOUT'\n}\n\nexport const updateCurrentUser = (username:string, password:string) =>\n        async (dispatch:any) => {\n    \n\n    let response:any = await authenticateUser(username, password);\n    //console.log(response.data);\n    switch (response.status) {\n        case 202:\n            dispatch({\n                type:loginTypes.LOGIN_SUCCESS,\n                payload:{\n                    currUser:response.data\n                }\n            });\n            break;\n        case 401:\n            dispatch({\n                type:loginTypes.LOGIN_UNSUCCESS,\n                payload: {\n                    loginMessege:response.status + \" login failed!\"\n                }\n            })\n    }\n\n}"]},"metadata":{},"sourceType":"module"}