{"version":3,"sources":["components/main-page-component/MainPage.tsx","utilities/axiosConfig.ts","utilities/api.ts","action-mappers/main-post-actions.ts","action-mappers/login-actions.ts","components/yt-component/YTComponent.tsx","components/post-card-component/PostCardComponent.tsx","components/home-page-component/HomePageComponent.tsx","components/home-page-component/HomePageContainer.tsx","action-mappers/post-actions.ts","components/submit-card-component/SubmitCardComponent.tsx","components/profile-page-component/ProfilePageComponent.tsx","components/profile-page-component/ProfilePageContainer.tsx","components/registration-component/RegistrationComponent.tsx","components/login-component/LoginComponent.tsx","components/login-component/LoginContainer.tsx","reducers/curr-user-reducer.ts","reducers/post-reducer.ts","reducers/main-post-reducer.ts","action-mappers/profile-actions.ts","reducers/profile-reducer.ts","reducers/index.ts","Store.ts","components/reset-password-component/ResetPasswordComponent.tsx","components/forgot-password-component/ForgotPasswordComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["main","className","to","pathname","axiosConfg","axios","create","baseURL","getPersonalList","offset","limit","user","console","log","PaginateReq","get","userId","authenticateUser","username","password","a","credentials","post","response","postTypes","loginTypes","logout","dispatch","type","payload","loginMessege","YTComponent","opts","height","width","playerVars","start","this","props","youtubeLinks","time","YouTube","videoId","ytlink","React","PureComponent","PostCardComponent","updateNewComment","event","setState","state","newComment","target","value","ingredients","recipe","Date","postSubmitted","postUser","firstName","preventDefault","body","comment","commentId","commentPost","commentUser","currUser","axiosConfig","like","likeUser","likePost","likeLikeType","likeTypeId","likeType","Row","Card","CardBody","CardTitle","title","CardSubtitle","postCategory","category","CardText","cardTextBuilder","ButtonGroup","Button","color","onClick","submitLike","Form","onSubmit","submitComment","Input","placeholder","onChange","postYtLink","Component","HomePageComponent","pageTurnForward","newOffset","getAllPosts","pageTurnFirst","pageTurnBack","allPosts","length","displayList","map","parent","key","postId","Pagination","aria-label","PaginationItem","disabled","PaginationLink","first","previous","next","last","mapDispatchToProps","status","data","connect","CurrUserState","MainPostState","SubmitCardComponent","updateIngredients","updateImage","image","updateRecipe","updateTitle","updateCategory","submitRecipe","newPost","categoryId","postComment","undefined","encType","ProfilePageComponent","toggleSubmitCard","toggle","Collapse","isOpen","posts","PostState","Register","useState","email","setemail","setuname","setpass","setfirst","lastName","setlast","id","user_id","then","r","val","htmlFor","aria-describedby","LoginComponent","updateUsername","updatePassword","submitLogin","updateCurrentUser","toProfileP","loginMessage","intialState","initialState","profileTypes","profile","profileId","bio","coverImage","profileUser","combineReducers","action","ProfileState","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","reduxThunk","logger","store","createStore","ResetPasswordComponent","resetPassword","ForgotPasswordComponent","updateEmail","sendRecovery","App","path","exact","component","MainPage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc30ba66.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../css/Main.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { NavLink} from 'react-router-dom';\r\n\r\n\r\nfunction main () {\r\n\r\n\r\n    return(\r\n        <div className=\"MainButtons\">\r\n        <header>\r\n            <nav >\r\n                <ul className=\"LinkElements\">\r\n                    <li>< NavLink className=\"mainLink\" to={{\r\n                        pathname: '/Login'\r\n                    }}>Login</ NavLink></li>\r\n\r\n                    <li><NavLink className=\"mainLink\" to={{\r\n                        pathname: '/register'\r\n                    }}>Register</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n        </div>\r\n        // <div className=\"MainButtons\" >\r\n        //     <button onClick = {profileP} type=\"button\" className=\"btn btn-warning btn-lg\" >Login</button>\r\n        //     <button type=\"button\" id=\"RegisterButton\" className=\"btn btn-warning btn-lg\">Register</button>\r\n        // </div>      \r\n        \r\n    );\r\n    \r\n}\r\n\r\nconst profileP = () => {\r\n   console.log(\"Back to home page\");\r\n    \r\n}\r\n\r\n\r\nexport default main;","import axios from \"axios\";\r\n\r\nconst iqIP = \"10.41.29.161\";\r\nconst iqIP2 = \"10.41.42.80\";\r\nconst usfIP = \"10.226.80.204\";\r\nconst local = \"localhost\";\r\nconst ec2IP = \"\";\r\nconst desky = \"192.168.137.192\"\r\n\r\nexport const axiosConfg = axios.create({\r\n    baseURL: 'http://' + iqIP + ':8080/project2'\r\n});\r\n \r\nexport default axiosConfg;","import  axiosConfig, { axiosConfg }  from \"./axiosConfig\";\r\nimport axios from \"axios\";\r\nimport { IPost } from \"../model/IPost\";\r\nimport { ILike } from \"../model/ILike\";\r\nimport { IComment } from \"../model/IComment\";\r\nimport IRegister from \"../model/IRegister\";\r\nimport IUser from \"../model/IUser\";\r\nimport { IProfile } from \"../model/IProfile\";\r\n\r\ninterface IReqBody {\r\n    offset: number,\r\n    limit: number,\r\n    user:IUser\r\n}\r\n\r\nexport const getPersonalList = (offset: number, limit: number, user: IUser) =>{\r\n    //return axiosConfig.get(\"list.app?o=\" + offset + \"&l=\" + limit + \"&u=\" + user.id);\r\n    console.log(user);\r\n\r\n    let PaginateReq:IReqBody = {\r\n        offset,\r\n        limit,\r\n        user\r\n    }\r\n\r\n    console.log(PaginateReq);\r\n\r\n    //return axiosConfg.post(\"userpost.app\", PaginateReq);\r\n\r\n    return axiosConfg.get(\"post\" + user.userId + \".app\");\r\n\r\n\r\n    //return axios.get('https://api.myjson.com/bins/vpwds');\r\n    //return axios.get('https://api.myjson.com/bins/1bxro8');\r\n}\r\n\r\nexport const getList = (offset: number, limit: number) => {\r\n    \r\n\r\n    let PaginateReq:IReqBody = {\r\n        offset,\r\n        limit,\r\n        user:{\r\n            userId:0,\r\n            username:\"\",\r\n            password:\"\",\r\n            firstName:\"\",\r\n            lastName:\"\",\r\n            email:\"\"\r\n        }\r\n    }\r\n\r\n    return axiosConfg.get(\"postlist.app\");\r\n}\r\n\r\nexport const publishPost = (body: IPost) => {\r\n    return axiosConfig.post('newpost.app',body);\r\n}\r\n\r\nexport const authenticateUser = async (username:string, password:string) => {\r\n    let credentials:IUser = {\r\n        username: username,\r\n        password: password\r\n    };\r\n\r\n    //let response = await axios.get('https://api.myjson.com/bins/6amgk'/*, credentials*/);\r\n\r\n    let response = await axiosConfg.post('login.app', credentials)\r\n    console.log(response);\r\n    return response;\r\n}\r\n\r\nexport const hitLike = (body: ILike) => {\r\n    return axiosConfig.post('newlike.app', body);\r\n}\r\n\r\nexport const postComment = (body: IComment) => {\r\n    return axiosConfig.post('newcomm.app', body);\r\n}\r\n\r\nexport const regUser = (body: IRegister) => {\r\n    return axiosConfg.post('/newuser.app', body);\r\n}\r\n\r\nexport const getProfile = (body: IUser) => {\r\n    return axiosConfg.get('prof' + body.userId + '.app');\r\n}\r\n\r\nexport const updateProfile = (body: IProfile) => {\r\n    return axiosConfg.post('newprof.app', body);\r\n}\r\n\r\nexport const resetPassword = (body: IUser) => {\r\n    return axiosConfg.post('reeee.app', body);\r\n}\r\n\r\nexport const sendEmail = (body: IUser) => {\r\n    console.log(body);\r\n    return axiosConfg.post('recovery.app', body);\r\n}","import { getList } from \"../utilities/api\";\r\nimport { IPost } from \"../model/IPost\";\r\n\r\nexport const postTypes = {\r\n    SUCCESSFUL_GET_PAGE_POSTS: 'MAIN_SUCCESSFUL_GET_PAGE_POSTS',\r\n    UNSUCCESSFUL_GET_PAGE_POSTS: 'MAIN_UNSUCCESSFUL_GET_PAGE_POSTS'\r\n}\r\n\r\nexport const getAllPosts = (limit: number, offset: number) => async (dispatch: any) => {\r\n\r\n        let response: any = await getList(offset, limit);\r\n    switch (response.status) {\r\n        case 200:\r\n        case 202: \r\n            dispatch({\r\n                type: postTypes.SUCCESSFUL_GET_PAGE_POSTS,\r\n                payload:{\r\n                    allPosts: response.data\r\n                }\r\n            });\r\n            break;\r\n        default:\r\n            dispatch({\r\n                type:postTypes.UNSUCCESSFUL_GET_PAGE_POSTS\r\n            });\r\n    }\r\n}","import { authenticateUser } from \"../utilities/api\";\r\n\r\nexport const loginTypes = {\r\n    LOGIN_SUCCESS: 'LOGIN_LOGIN_SUCCESS',\r\n    LOGIN_UNSUCCESS: 'LOGIN_LOGIN_UNSUCCESS',\r\n    LOGOUT: 'LOGIN_LOGOUT'\r\n}\r\n\r\nexport const updateCurrentUser = (username:string, password:string) =>\r\n        async (dispatch:any) => {\r\n    \r\n\r\n    let response:any = await authenticateUser(username, password);\r\n    //console.log(response.data);\r\n    switch (response.status) {\r\n        case 200:\r\n        case 202:\r\n            dispatch({\r\n                type:loginTypes.LOGIN_SUCCESS,\r\n                payload:{\r\n                    currUser:response.data\r\n                }\r\n            });\r\n            break;\r\n        case 401:\r\n            dispatch({\r\n                type:loginTypes.LOGIN_UNSUCCESS,\r\n                payload: {\r\n                    loginMessege:response.status + \" login failed!\"\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch:any) => {\r\n    dispatch({\r\n        type:loginTypes.LOGOUT,\r\n        payload:{\r\n            loginMessege:\"logged out!\"\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport { IYoutube } from '../../model/IYoutube';\r\n\r\nexport interface IYoutuber {\r\n    youtubeLinks: IYoutube;\r\n}\r\n\r\nexport class YTComponent extends React.PureComponent<IYoutuber> {\r\n    render() {\r\n        const opts = {\r\n            height: '390',\r\n            width: '640',\r\n            playerVars: { // https://developers.google.com/youtube/player_parameters\r\n              start: this.props.youtubeLinks.time\r\n            }\r\n          };\r\n        return (\r\n            <>\r\n                <YouTube \r\n                    videoId={this.props.youtubeLinks.ytlink}\r\n                    opts={opts}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport {\r\n  CardBody,\r\n  Card,\r\n  CardText,\r\n  CardSubtitle,\r\n  CardTitle,\r\n  CardImg,\r\n  Button,\r\n  ButtonGroup,\r\n  Form,\r\n  Input,\r\n  Row\r\n} from \"reactstrap\";\r\nimport { IPost } from \"../../model/IPost\";\r\nimport { YTComponent } from \"../yt-component/YTComponent\";\r\nimport { IYoutube } from \"../../model/IYoutube\";\r\nimport IUser from \"../../model/IUser\";\r\nimport { hitLike, postComment } from \"../../utilities/api\";\r\nimport { ILike } from \"../../model/ILike\";\r\nimport { IComment } from \"../../model/IComment\";\r\n\r\ninterface IPostProps {\r\n  post: IPost,\r\n  currUser: IUser,\r\n  parent: string\r\n}\r\n\r\ninterface IPostState {\r\n  newComment: string\r\n}\r\n\r\nexport class PostCardComponent extends React.Component<IPostProps, IPostState> {\r\n  constructor(props:any) {\r\n    super(props);\r\n    this.state = {\r\n      newComment:\"\"\r\n    }\r\n  }\r\n\r\n  updateNewComment = (event:any) => {\r\n    this.setState({\r\n      ...this.state,\r\n      newComment:event.target.value\r\n    })\r\n  }\r\n\r\n  cardTextBuilder() {\r\n    return `Ingredients:  ${this.props.post.ingredients}\\n\\r\r\n            Recipe:  ${this.props.post.recipe}\\n\\r\r\n            Submitted on: ${new Date(this.props.post.postSubmitted)} by ${this.props.post.postUser.firstName}`;\r\n  }\r\n\r\n  submitComment(event:SyntheticEvent) {\r\n    event.preventDefault();\r\n    let comment:IComment = {\r\n      commentId:0,\r\n      comment: this.state.newComment,\r\n      commentPost: this.props.post,\r\n      commentUser: this.props.currUser\r\n    };\r\n    postComment(comment);\r\n    console.log(\"submitted comment\");\r\n  }\r\n\r\n  submitLike(type:number) {\r\n    let like:ILike = {\r\n      likeUser: this.props.currUser,\r\n      likePost: this.props.post,\r\n      likeLikeType: {likeTypeId: type, likeType: (type===1?\"Tasty\":(type===2?\"Looks good\":\"Needs salt\"))}\r\n    };\r\n    hitLike(like);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Card>\r\n            {/*<CardImg>{() => this.props.post.image && this.props.post.image}</CardImg>*/}\r\n            <CardBody>\r\n              <CardTitle>{this.props.post.title}</CardTitle>\r\n              <CardSubtitle>\r\n                {this.props.post.postCategory.category}\r\n              </CardSubtitle>\r\n              <CardText>{this.cardTextBuilder()}</CardText>\r\n            </CardBody>\r\n          </Card>\r\n        </Row>\r\n        <Row>\r\n          <ButtonGroup>\r\n            <Button color=\"success\" onClick={() => this.submitLike(1)}>Tasty</Button>\r\n            <Button color=\"warning\" onClick={() => this.submitLike(2)}>Looks Good</Button>\r\n            <Button color=\"danger\" onClick={() => this.submitLike(3)}>Needs Salt</Button>\r\n          </ButtonGroup>\r\n        </Row>\r\n        {/*<Row>\r\n          {this.props.post.postComment}\r\n        </Row>*/}\r\n        <Row>\r\n          <Form onSubmit={this.submitComment}>\r\n            <Input\r\n              type=\"textarea\"\r\n              placeholder=\"What do you think about this dish?\"\r\n              value={this.state.newComment}\r\n              onChange={this.updateNewComment}\r\n            />\r\n            <Input type=\"submit\" value=\"Leave Comment\" />\r\n          </Form>\r\n        </Row>\r\n        <Row>\r\n          {this.props.post.postYtLink && (\r\n            <YTComponent youtubeLinks={this.props.post.postYtLink} />\r\n          )}\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../../css/Main.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport IUser from \"../../model/IUser\";\r\nimport { IPost } from \"../../model/IPost\";\r\nimport { PostCardComponent } from \"../post-card-component/PostCardComponent\";\r\nimport {\r\n  CardColumns,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink\r\n} from \"reactstrap\";\r\n\r\ninterface IMainPostState {\r\n  limit: number;\r\n  offset: number;\r\n}\r\n\r\ninterface IMainPostProps {\r\n  user: IUser;\r\n  allPosts: IPost[];\r\n  getAllPosts: (limit: number, offset: number) => void;\r\n  logout: () => void;\r\n}\r\n\r\nexport class HomePageComponent extends React.Component<\r\n  IMainPostProps,\r\n  IMainPostState\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      limit: 10,\r\n      offset: 0\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.user) {\r\n      if (this.props.allPosts.length === 0) {\r\n        this.props.getAllPosts(10, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  pageTurnForward = () => {\r\n    let newOffset = this.state.offset + this.state.limit;\r\n    this.props.getAllPosts(this.state.limit, newOffset);\r\n    this.setState({\r\n      ...this.state,\r\n      offset: newOffset\r\n    });\r\n  };\r\n\r\n  pageTurnFirst = () => {\r\n    let newOffset = 0;\r\n    this.props.getAllPosts(this.state.limit, newOffset);\r\n    this.setState({\r\n      ...this.state,\r\n      offset: newOffset\r\n    });\r\n  };\r\n\r\n  pageTurnBack = () => {\r\n    if (this.state.offset > 0) {\r\n      let newOffset = this.state.offset - this.state.limit;\r\n      this.props.getAllPosts(this.state.limit, newOffset);\r\n      this.setState({\r\n        ...this.state,\r\n        offset: newOffset\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.props.user) {\r\n      const displayList: any[] = this.props.allPosts.map<any>((post: any) => {\r\n        return <><PostCardComponent post={post} currUser={this.props.user} parent=\"hp\" key={post.postId}/><br/></>;\r\n      })\r\n      return (\r\n        <div className=\"MainButtons\">\r\n          <header>\r\n            <nav>\r\n              <ul>\r\n                <li>\r\n                  <NavLink\r\n                    to={{\r\n                      pathname: \"/profile\"\r\n                    }}\r\n                  >\r\n                    My Profile\r\n                  </NavLink>\r\n                </li>\r\n                <li>\r\n                  <NavLink\r\n                    to={{\r\n                      pathname: \"/\"\r\n                    }}\r\n                    onClick={this.props.logout}\r\n                  >\r\n                    Logout\r\n                  </NavLink>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </header>\r\n          <div>\r\n            {displayList}\r\n            <Pagination aria-label=\"Page navigation example\">\r\n              <PaginationItem disabled>\r\n                <PaginationLink first onClick={this.pageTurnFirst} />\r\n              </PaginationItem>\r\n              <PaginationItem\r\n                disabled={!this.state.offset}\r\n                onClick={this.pageTurnBack}\r\n              >\r\n                <PaginationLink previous />\r\n              </PaginationItem>\r\n              <PaginationItem onClick={this.pageTurnForward}>\r\n                <PaginationLink next />\r\n              </PaginationItem>\r\n              <PaginationItem>\r\n                <PaginationLink last />\r\n              </PaginationItem>\r\n            </Pagination>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n  }\r\n}\r\n","import { IState } from \"../../reducers\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { getAllPosts } from \"../../action-mappers/main-post-actions\";\r\nimport { logout } from \"../../action-mappers/login-actions\";\r\nimport { HomePageComponent } from \"./HomePageComponent\";\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n    return {\r\n        user: state.CurrUserState.currUser,\r\n        allPosts: state.MainPostState.allPosts\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getAllPosts,\r\n    logout\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePageComponent)\r\n","import { getPersonalList } from \"../utilities/api\";\r\nimport { IPost } from \"../model/IPost\";\r\nimport IUser from \"../model/IUser\";\r\n\r\nexport const postTypes = {\r\n    SUCCESSFUL_GET_PAGE_POSTS: 'POST_SUCCESSFUL_GET_PAGE_POSTS',\r\n    UNSUCCESSFUL_GET_PAGE_POSTS: 'POST_UNSUCCESSFUL_GET_PAGE_POSTS'\r\n}\r\n\r\nexport const getAllPosts = (limit: number, offset: number, currUser: IUser) => async (dispatch: any) => {\r\n    try {\r\n        let posts: any = await getPersonalList(offset, limit, currUser);\r\n\r\n        dispatch({\r\n            type: postTypes.SUCCESSFUL_GET_PAGE_POSTS,\r\n            payload:{\r\n                allPosts: posts.data\r\n            }\r\n        });\r\n    } catch (e) {\r\n        dispatch({\r\n            type:postTypes.UNSUCCESSFUL_GET_PAGE_POSTS\r\n        });\r\n    }\r\n}","import { useState, SyntheticEvent } from \"react\";\r\nimport { Form, Input } from \"reactstrap\";\r\nimport { publishPost } from \"../../utilities/api\";\r\nimport React from \"react\";\r\nimport IUser from \"../../model/IUser\";\r\nimport { IPost } from \"../../model/IPost\";\r\n\r\ninterface ISubmitProps {\r\n    currUser: IUser\r\n}\r\n\r\ninterface ISubmitState {\r\n    image: any,\r\n    ingredients: string,\r\n    recipe: string,\r\n    title: string,\r\n    category: number\r\n}\r\n\r\nexport class SubmitCardComponent extends React.Component<ISubmitProps, ISubmitState>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            image: null,\r\n            ingredients: \"\",\r\n            recipe: \"\",\r\n            title: \"\",\r\n            category: 0\r\n        };\r\n    }\r\n\r\n    updateIngredients = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            ingredients: event.target.value\r\n        });\r\n    }\r\n\r\n    updateImage = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            image: event.target.value\r\n        });\r\n    }\r\n\r\n    updateRecipe = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            recipe: event.target.value\r\n        });\r\n    }\r\n\r\n    updateTitle = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            title: event.target.value\r\n        });\r\n    }\r\n\r\n    updateCategory = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            category: event.target.value\r\n        });\r\n    }\r\n\r\n    submitRecipe = async (event: SyntheticEvent) => {\r\n        event.preventDefault();\r\n        let newPost:IPost = {\r\n            postId: 0,\r\n            title: this.state.title,\r\n            postSubmitted: new Date(),\r\n            //image: this.state.image,\r\n            recipe: this.state.recipe,\r\n            ingredients: this.state.ingredients,\r\n            postCategory: {\r\n                categoryId: this.state.category,\r\n                category: (this.state.category === 1) ? \"Breakfast\" : ((this.state.category === 2) ? \"Lunch\" : \"Dinner\")\r\n            },\r\n            postComment: undefined,\r\n            postUser: this.props.currUser,\r\n            postYtLink: undefined\r\n        };\r\n\r\n        publishPost(newPost);\r\n    }\r\n\r\n    render() {\r\n    return(\r\n        <Form onSubmit={this.submitRecipe} encType=\"multipart\">\r\n            <Input type=\"text\" placeholder=\"ingredients\"\r\n                onChange={this.updateIngredients}/>\r\n            \r\n            <Input type=\"text\" placeholder=\"recipe\"\r\n                onChange={this.updateRecipe}/>\r\n            \r\n            <Input type=\"text\" placeholder=\"title\"\r\n                onChange={this.updateTitle}/>\r\n\r\n            <Input type=\"select\" onChange={this.updateCategory}>\r\n                <option value={1}>Breakfast</option>\r\n                <option value={2}>Lunch</option>\r\n                <option value={3}>Dinner</option>\r\n            </Input>\r\n\r\n            {/*<Input type=\"file\" onChange={this.updateImage}>Choose an image!</Input>*/}\r\n                \r\n            <Input type=\"submit\" value=\"Post Recipe\"/>\r\n            \r\n        </Form>\r\n    )\r\n    }\r\n}","import React from \"react\";\r\nimport \"../../css/Main.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport IUser from \"../../model/IUser\";\r\nimport { IPost } from \"../../model/IPost\";\r\nimport { PostCardComponent } from \"../post-card-component/PostCardComponent\";\r\nimport {\r\n  CardColumns,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  Button,\r\n  Collapse\r\n} from \"reactstrap\";\r\nimport { postComment } from \"../../utilities/api\";\r\nimport { SubmitCardComponent } from \"../submit-card-component/SubmitCardComponent\";\r\n\r\ninterface IPostState {\r\n  limit: number;\r\n  offset: number;\r\n  toggle: boolean\r\n}\r\n\r\ninterface IPostProps {\r\n  user: IUser;\r\n  allPosts: IPost[];\r\n  getAllPosts: (limit: number, offset: number, user: IUser) => void;\r\n  logout: () => void;\r\n}\r\n\r\nexport class ProfilePageComponent extends React.Component<\r\n  IPostProps,\r\n  IPostState\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      limit: 10,\r\n      offset: 0,\r\n      toggle: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.user) {\r\n      if (this.props.allPosts.length === 0) {\r\n        this.props.getAllPosts(10, 0, this.props.user);\r\n      }\r\n    }\r\n  }\r\n\r\n  pageTurnForward = () => {\r\n    let newOffset = this.state.offset + this.state.limit;\r\n    this.props.getAllPosts(this.state.limit, newOffset, this.props.user);\r\n    this.setState({\r\n      ...this.state,\r\n      offset: newOffset\r\n    });\r\n  };\r\n\r\n  pageTurnFirst = () => {\r\n    let newOffset = 0;\r\n    this.props.getAllPosts(this.state.limit, newOffset, this.props.user);\r\n    this.setState({\r\n      ...this.state,\r\n      offset: newOffset\r\n    });\r\n  };\r\n\r\n  pageTurnBack = () => {\r\n    if (this.state.offset > 0) {\r\n      let newOffset = this.state.offset - this.state.limit;\r\n      this.props.getAllPosts(this.state.limit, newOffset, this.props.user);\r\n      this.setState({\r\n        ...this.state,\r\n        offset: newOffset\r\n      });\r\n    }\r\n  };\r\n\r\n  toggleSubmitCard = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      toggle: !this.state.toggle\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    if (this.props.user.username) {\r\n      const displayList: any[] = this.props.allPosts.map<any>((post: any) => {\r\n        return <><PostCardComponent post={post} currUser={this.props.user} parent=\"pp\" key={post.postId}/><br/></>\r\n      })\r\n      return (\r\n        <div className=\"MainButtons\">\r\n          <header>\r\n            <nav>\r\n              <ul>\r\n                <li>\r\n                  <NavLink to={{pathname: \"/home\"}}>\r\n                    Home\r\n                  </NavLink>\r\n                </li>\r\n                <li>\r\n                  <NavLink\r\n                    to={{pathname: \"/\"}} \r\n                    onClick={this.props.logout}>\r\n                    Logout\r\n                  </NavLink>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </header>\r\n          <br/>\r\n          <div>\r\n            <Button color=\"primary\" onClick={this.toggleSubmitCard}>Add post</Button>\r\n            <Collapse isOpen={this.state.toggle}>\r\n              <SubmitCardComponent currUser={this.props.user}></SubmitCardComponent>\r\n            </Collapse>\r\n          </div>\r\n          <div>\r\n              \r\n\r\n              {displayList /*()=>{for(let post of this.props.allPosts) return <PostCardComponent post={post} currUser={this.props.user} parent=\"pp\"/>}*/}\r\n              </div>\r\n              <div>\r\n            <Pagination aria-label=\"Page navigation example\">\r\n              <PaginationItem disabled>\r\n                <PaginationLink first onClick={this.pageTurnFirst} />\r\n              </PaginationItem>\r\n              <PaginationItem\r\n                disabled={!this.state.offset}\r\n                onClick={this.pageTurnBack}\r\n              >\r\n                <PaginationLink previous />\r\n              </PaginationItem>\r\n              <PaginationItem onClick={this.pageTurnForward}>\r\n                <PaginationLink next />\r\n              </PaginationItem>\r\n              <PaginationItem>\r\n                <PaginationLink last />\r\n              </PaginationItem>\r\n            </Pagination>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n  }\r\n}\r\n","import { IState } from \"../../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { PostCardComponent } from \"../post-card-component/PostCardComponent\";\r\nimport { getAllPosts } from \"../../action-mappers/post-actions\";\r\nimport { logout } from \"../../action-mappers/login-actions\"\r\nimport { ProfilePageComponent } from \"./ProfilePageComponent\";\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n    return {\r\n        user: state.CurrUserState.currUser,\r\n        allPosts: state.PostState.allPosts\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getAllPosts,\r\n    logout\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfilePageComponent)\r\n","import React, { useState } from 'react';\r\nimport '../../css/Register.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { NavLink} from 'react-router-dom';\r\nimport { regUser } from '../../utilities/api';\r\n\r\nexport const Register:React.FC<any> = (props:any) => {\r\n    const [email, setemail] = useState(\"\");\r\n    const [username, setuname] = useState(\"\");\r\n    const [password, setpass] = useState(\"\");\r\n    const [firstName, setfirst] = useState(\"\");\r\n    const [lastName, setlast] = useState(\"\");\r\n    \r\n    return(\r\n        <div >\r\n            <header className=\"MainButtons\">\r\n            <nav >\r\n                <ul className=\"LinkElements\">\r\n                    <li>< NavLink className=\"mainLink\" to={{\r\n                        pathname: '/main'\r\n                    }}>Home</ NavLink></li>\r\n\r\n                    <li><NavLink className=\"mainLink\" to={{\r\n                        pathname: '/Login'\r\n                    }}>Login</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n\r\n        <div className=\"container\">\r\n            <form id =\"RegisterForm\" className=\"form-horizontal\" onSubmit={()=>regUser({\r\n                user_id:0,\r\n                email: email,\r\n                username: username,\r\n                password: password,\r\n                firstName: firstName,\r\n                lastName: lastName\r\n            }).then(r=>console.log(r.data))}>\r\n                <div id=\"RegisterElements\" className=\"row\">\r\n                <div className=\"TextForRegister\">\r\n                    <p>Indulge in an exciting experience </p>\r\n                    <p>by becoming a memeber of</p>\r\n                    <p>the recipe family</p>\r\n                </div>\r\n                <div id=\"FirstName\" className=\"form-group col-md-4\">\r\n                        <label>First Name</label>\r\n                        <input className=\"form-control input-lg\" placeholder=\"first name\" onChange={val=>setfirst(val.target.value)}/> \r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                        <label>Last Name</label>\r\n                        <input className=\"form-control input-lg\" placeholder=\"last name\" onChange={val=>setlast(val.target.value)}/> \r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                        <label>User Name</label>\r\n                        <input className=\"form-control input-lg\" placeholder=\"user name\" onChange={val=>setuname(val.target.value)}/> \r\n                    </div>\r\n                    <div className=\"form-group col-md-4\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Email address </label>\r\n                        <input type=\"email\" className=\"form-control input-lg\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" onChange={val=>setemail(val.target.value)}/>\r\n                        <small id=\"emailHelp\" className=\"form-text text-muted\"></small>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group col-md-4\">\r\n                        <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                        <input type=\"password\" className=\"form-control input-lg\" id=\"exampleInputPassword1\" placeholder=\"Password\" onChange={val=>setpass(val.target.value)}/> \r\n                        <button id=\"SubmitButton\" type=\"submit\" className=\"btn btn-primary\">Sign Up</button>\r\n                    </div> \r\n                </div>\r\n    \r\n            </form>       \r\n        </div> \r\n                    <div className=\"SpaceNeededDiv\">\r\n\r\n                    </div>\r\n\r\n        </div>\r\n        \r\n    );\r\n    \r\n}\r\nexport default Register;","import React, {  SyntheticEvent } from 'react';\r\nimport '../../css/Main.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\n\r\ninterface ILoginState {\r\n    username: string,\r\n    password: string\r\n};\r\n\r\ninterface ILoginProps {\r\n    updateCurrentUser: (username: string, password: string) => void,\r\n    loginMessage: string\r\n};\r\n\r\nexport class LoginComponent extends React.Component<ILoginProps, ILoginState>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n    updateUsername = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            username:event.target.value\r\n        });\r\n    }\r\n\r\n    updatePassword = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            password:event.target.value\r\n        });\r\n    }\r\n\r\n    submitLogin = async (event: SyntheticEvent) => {\r\n        event.preventDefault();\r\n        this.props.updateCurrentUser(this.state.username, this.state.password);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n            <header className=\"MainButtons\">\r\n                <nav >\r\n                    <ul className=\"LinkElements\">\r\n                        <li><NavLink className=\"mainLink\" to={{pathname:'/main'}}>Main</NavLink></li>\r\n                        <li>< NavLink className=\"mainLink\" to={{\r\n                            pathname: '/home'\r\n                        }}>Home</ NavLink></li>\r\n                        <li><NavLink className=\"mainLink\" to={{\r\n                            pathname: '/register'\r\n                        }}>Register</NavLink></li>\r\n                        <li><NavLink className=\"mainLink\" to={{\r\n                            pathname: '/profile'\r\n                        }}>Profile</NavLink></li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n            <div className=\"container\">\r\n            \r\n                <form id =\"LoginForm\" className=\"form-horizontal\" onSubmit={this.submitLogin}>   \r\n                    <div id=\"LoginElements\" className=\"row\">\r\n                    <div className=\"TextForLogin\">\r\n                        <p>Share your favorite recipies </p>\r\n                        <p>with friends and family</p>\r\n                    </div>\r\n                        <div className=\"form-group col-md-4\">\r\n                            <label id=\"EmailInput\" htmlFor=\"exampleInputEmail1\">Username</label>\r\n                            <input type=\"text\" className=\"form-control input-lg\" id=\"username\" aria-describedby=\"usernameField\" placeholder=\"Username\" value={this.state.username} onChange={this.updateUsername}/>\r\n                            <small id=\"emailHelp\" className=\"form-text text-muted\"></small>\r\n                        </div>\r\n                        <div className=\"form-group col-md-4\">\r\n                            <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                            <input type=\"password\"className=\"form-control input-lg\" id=\"exampleInputPassword1\" placeholder=\"Password\" value={this.state.password} onChange={this.updatePassword}/>\r\n                            <button onClick={toProfileP} id=\"SubmitButton\" type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <NavLink to={{pathname: '/forgot'}}>Forgot password?</NavLink>\r\n                <p>{this.props.loginMessage}</p>\r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    };\r\n}\r\n\r\n\r\nfunction toProfileP (){\r\n \r\n}\r\n","import { IState } from \"../../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { LoginComponent } from \"./LoginComponent\";\r\nimport { updateCurrentUser } from \"../../action-mappers/login-actions\";\r\n\r\n\r\nconst mapStateToProps = (state:IState) => {\r\n    return {\r\n        loginMessage:state.CurrUserState.loginMessage\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateCurrentUser\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginComponent);","import { ICurrUserState } from \".\";\r\nimport { loginTypes } from \"../action-mappers/login-actions\";\r\n\r\nconst intialState:ICurrUserState = {\r\n    currUser: {\r\n        userId: 0,\r\n        username: \"\",\r\n        password: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\"\r\n    },\r\n    loginMessage: \"\"\r\n}\r\n\r\nexport const currUserReducer = (state = intialState, action:any) => {\r\n    switch (action.type) {\r\n        case loginTypes.LOGIN_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                currUser:action.payload.currUser,\r\n                loginMessage:\"Login Successful!\"\r\n            };\r\n        }\r\n        case loginTypes.LOGIN_UNSUCCESS: {\r\n            return {\r\n                ...state,\r\n                loginMessage:action.payload.loginMessage\r\n            };\r\n        }\r\n        case loginTypes.LOGOUT: {\r\n            return intialState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { IPostState } from \".\";\r\nimport { postTypes } from \"../action-mappers/post-actions\";\r\n\r\n\r\nconst initialState: IPostState = {\r\n    allPosts:[]\r\n}\r\n\r\nexport const postReducer = (state = initialState, action:any) => {\r\n    switch (action.type) {\r\n        case postTypes.SUCCESSFUL_GET_PAGE_POSTS: {\r\n            return {\r\n                ...state,\r\n                allPosts:action.payload.allPosts\r\n            };\r\n        }\r\n        case postTypes.UNSUCCESSFUL_GET_PAGE_POSTS: {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { IMainPostState } from \".\";\r\nimport { postTypes } from \"../action-mappers/main-post-actions\";\r\n\r\n\r\nconst initialState: IMainPostState = {\r\n    allPosts:[]\r\n}\r\n\r\nexport const mainPostReducer = (state = initialState, action:any) => {\r\n    switch (action.type) {\r\n        case postTypes.SUCCESSFUL_GET_PAGE_POSTS: {\r\n            return {\r\n                ...state,\r\n                allPosts:action.payload.allPosts\r\n            };\r\n        }\r\n        case postTypes.UNSUCCESSFUL_GET_PAGE_POSTS: {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { IProfile } from \"../model/IProfile\"\r\nimport { updateProfile, getProfile } from \"../utilities/api\"\r\nimport IUser from \"../model/IUser\";\r\n\r\n\r\nexport const profileTypes = {\r\n    SUCCESSFUL_GET_PROFILE: 'PROFILE_SUCCESSFUL_GET_PROFILE',\r\n    UNSUCCESSFUL_GET_PROFILE: 'PROFILE_UNSUCCESSFUL_GET_PROFILE',\r\n    SUCCESSFUL_UPDATE_PROFILE: 'PROFILE_SUCCESSFUL_UPDATE_PROFILE',\r\n    UNSUCCESSFUL_UPDATE_PROFILE: 'PROFILE_UNSUCCESSFUL_UPDATE_PROFILE',\r\n    LOGOUT_REMOVE_PROFILE: 'PROFILE_LOGOUT_REMOVE_PROFILE'\r\n}\r\n\r\nexport const updateBio = (profile: IProfile) => async (dispatch:any) => {\r\n    let response:any = await updateProfile(profile);\r\n\r\n    if(response.status === 202) {\r\n        dispatch({\r\n            type: profileTypes.SUCCESSFUL_UPDATE_PROFILE,\r\n            payload:{\r\n                profile\r\n            }\r\n        });\r\n    } else {\r\n        dispatch({\r\n            type: profileTypes.UNSUCCESSFUL_UPDATE_PROFILE,\r\n            payload: {\r\n                \r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const getBio = (user: IUser) => async (dispatch:any) => {\r\n    let response:any = await getProfile(user);\r\n\r\n    if(response.body) {\r\n        dispatch({\r\n            type:profileTypes.SUCCESSFUL_GET_PROFILE,\r\n            payload: {\r\n                profile: response.body\r\n            }\r\n        });\r\n    } else {\r\n        dispatch({\r\n            type:profileTypes.UNSUCCESSFUL_GET_PROFILE,\r\n            payload: {\r\n\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch:any) => {\r\n    dispatch({\r\n        type: profileTypes.LOGOUT_REMOVE_PROFILE,\r\n        payload: {\r\n\r\n        }\r\n    });\r\n}","import { IProfileState } from \".\";\r\nimport { profileTypes } from \"../action-mappers/profile-actions\";\r\n\r\n\r\nconst initialState:IProfileState = {\r\n    profile: {\r\n        profileId:0,\r\n        bio:\"\",\r\n        coverImage:null,\r\n        profileUser: {\r\n            userId: 0,\r\n            username: \"\",\r\n            password: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email:\"\"\r\n        }\r\n    }\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case profileTypes.SUCCESSFUL_GET_PROFILE:\r\n        case profileTypes.SUCCESSFUL_UPDATE_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.payload.profile\r\n            };\r\n\r\n        case profileTypes.UNSUCCESSFUL_GET_PROFILE:\r\n        case profileTypes.UNSUCCESSFUL_UPDATE_PROFILE:\r\n            return state;\r\n\r\n        case profileTypes.LOGOUT_REMOVE_PROFILE:\r\n            return initialState;   \r\n             \r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currUserReducer } from \"./curr-user-reducer\";\r\nimport { IPost } from '../model/IPost';\r\nimport IUser from '../model/IUser';\r\nimport { postReducer } from './post-reducer';\r\nimport { mainPostReducer } from './main-post-reducer';\r\nimport { IProfile } from '../model/IProfile';\r\nimport { profileReducer } from './profile-reducer';\r\n\r\n\r\nexport interface ICurrUserState {\r\n    currUser: IUser,\r\n    loginMessage: string\r\n}\r\n\r\nexport interface IPostState {\r\n    allPosts:IPost[]\r\n}\r\n\r\nexport interface IProfileState {\r\n    profile: IProfile\r\n}\r\n\r\nexport interface IMainPostState {\r\n    allPosts:IPost[]\r\n}\r\n\r\nexport interface IState {\r\n    CurrUserState: ICurrUserState,\r\n    PostState: IPostState,\r\n    MainPostState: IMainPostState,\r\n    ProfileState: IProfileState\r\n}\r\n\r\nexport const state = combineReducers<IState> ({\r\n    CurrUserState: currUserReducer,\r\n    PostState: postReducer,\r\n    MainPostState: mainPostReducer,\r\n    ProfileState: profileReducer,\r\n})","import { compose, applyMiddleware, Store, createStore } from \"redux\"\r\nimport logger from \"redux-logger\"\r\nimport reduxThunk from 'redux-thunk'\r\nimport { state } from \"./reducers\"\r\n\r\n//this is how we actually build the store\r\n//you really shouldn't ever have to change this file\r\n\r\nconst a:any = window\r\n\r\n//if they have devtools installed, let them be used\r\n//otherwise use the default from redux\r\nconst composeEnhancers = a.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(reduxThunk, logger)//exists in dispatch step\r\n)\r\n\r\n//this will be the store object that we use to give data to our components\r\nexport const store: Store<any> = createStore(\r\n    state,\r\n    enhancer\r\n)","import React, { SyntheticEvent } from 'react';\r\nimport { Form, Input } from 'reactstrap';\r\nimport { resetPassword } from '../../utilities/api';\r\nimport IUser from '../../model/IUser';\r\n\r\ninterface IPasswordState {\r\n    password:string\r\n    username:string\r\n}\r\n\r\nexport class ResetPasswordComponent extends React.Component<any, IPasswordState> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = {\r\n            password:\"\",\r\n            username:\"\"\r\n        }\r\n    }\r\n\r\n    updateUsername = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            username: event.target.value\r\n        });\r\n    }\r\n\r\n    updatePassword = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            password: event.target.value\r\n        });\r\n    }\r\n\r\n    resetPassword = async (event: SyntheticEvent) => {\r\n        event.preventDefault();\r\n        let user:IUser = {\r\n            userId:0,\r\n            username:this.state.username,\r\n            password:this.state.password,\r\n            firstName:\"\",\r\n            lastName:\"\",\r\n            email:\"\"\r\n        }\r\n        resetPassword(user);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n    \t        <Form onSubmit={this.resetPassword}>\r\n                    <Input type=\"text\" onChange={this.updateUsername} placeholder=\"username\">username</Input>\r\n                    <Input type=\"password\" onChange={this.updatePassword} placeholder=\"password\">New Password</Input>\r\n                    <Input type=\"submit\">Submit new password</Input>\r\n                </Form>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { SyntheticEvent } from 'react';\r\nimport { sendEmail } from '../../utilities/api';\r\nimport { Form, Input } from 'reactstrap';\r\nimport IUser from '../../model/IUser';\r\n\r\ninterface IForgotState {\r\n    email: string\r\n}\r\n\r\nexport class ForgotPasswordComponent extends React.Component<any, IForgotState> {\r\n    constructor (props:any) {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\"\r\n        }\r\n    }\r\n\r\n    updateEmail = (event: any) => {\r\n        this.setState({\r\n            ...this.state,\r\n            email: event.target.value\r\n        });\r\n    }\r\n\r\n    sendRecovery = async (event: SyntheticEvent) => {\r\n        event.preventDefault();\r\n        let user:IUser = {\r\n            userId:0,\r\n            username:\"\",\r\n            password:\"\",\r\n            firstName:\"\",\r\n            lastName:\"\",\r\n            email:this.state.email\r\n        }\r\n        sendEmail(user);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <Form onSubmit={this.sendRecovery}>\r\n                    <Input type=\"text\" onChange={this.updateEmail} placeholder=\"Enter email, please\"/>\r\n                    <Input type=\"submit\">Send me the email!</Input>\r\n                </Form>\r\n            </>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MainPage from \"./components/main-page-component/MainPage\";\r\nimport HomePageComponent from \"./components/home-page-component/HomePageContainer\";\r\nimport ProfilePageComponent from \"./components/profile-page-component/ProfilePageContainer\";\r\nimport Register from \"./components/registration-component/RegistrationComponent\";\r\nimport LoginComponent from \"./components/login-component/LoginContainer\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { store } from \"./Store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ResetPasswordComponent } from \"./components/reset-password-component/ResetPasswordComponent\";\r\nimport { ForgotPasswordComponent } from \"./components/forgot-password-component/ForgotPasswordComponent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Provider store={store} >\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Route path=\"/\" exact component={MainPage} />\r\n          <Switch>\r\n            <Route path=\"/main\" component={MainPage} />\r\n            <Route path=\"/Login\" component={LoginComponent} />\r\n            <Route path=\"/home\" component={HomePageComponent} />\r\n            <Route path=\"/profile\" component={ProfilePageComponent} />\r\n            <Route path=\"/register\" component={Register} />\r\n            <Route path=\"/resetpassword\" component={ResetPasswordComponent} />\r\n            <Route path=\"/forgot\" component={ForgotPasswordComponent} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: any) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl:any, config:any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl:any, config:any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}