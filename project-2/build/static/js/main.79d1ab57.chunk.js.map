{"version":3,"sources":["components/main-page-component/MainPage.tsx","components/home-page-component/HomePageComponent.tsx","components/profile-page-component/ProfilePageComponent.tsx","components/registration-component/RegistrationComponent.tsx","utilities/axiosConfig.ts","utilities/api.ts","components/login-component/LoginComponent.tsx","App.js","serviceWorker.js","index.js"],"names":["main","className","to","pathname","HomeP","ProfileP","Register","id","placeholder","htmlFor","type","aria-describedby","axiosConfg","axios","create","baseURL","authenticateUser","body","axiosConfig","post","toProfileP","Login","onSubmit","onClick","App","path","exact","component","MainPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79d1ab57.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../css/Main.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Redirect, Route, NavLink} from 'react-router-dom';\r\n\r\n\r\nfunction main () {\r\n\r\n\r\n    return(\r\n        <div className=\"MainButtons\">\r\n        <header>\r\n            <nav >\r\n                <ul className=\"LinkElements\">\r\n                    <li>< NavLink className=\"mainLink\" to={{\r\n                        pathname: '/Login'\r\n                    }}>Login</ NavLink></li>\r\n\r\n                    <li><NavLink className=\"mainLink\" to={{\r\n                        pathname: '/register'\r\n                    }}>Register</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n        </div>\r\n        // <div className=\"MainButtons\" >\r\n        //     <button onClick = {profileP} type=\"button\" className=\"btn btn-warning btn-lg\" >Login</button>\r\n        //     <button type=\"button\" id=\"RegisterButton\" className=\"btn btn-warning btn-lg\">Register</button>\r\n        // </div>      \r\n        \r\n    );\r\n    \r\n}\r\n\r\nconst profileP = () => {\r\n   console.log(\"Back to home page\");\r\n    \r\n}\r\n\r\n\r\nexport default main;","import React from 'react';\r\nimport '../../css/Main.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction HomeP () {\r\n    return(\r\n        <div>\r\n            <h1>THIS IS THE HOME PAGE</h1>\r\n        </div>\r\n    );\r\n}\r\nexport default HomeP;","import React from 'react';\r\nimport '../../css/Main.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Redirect, Route, NavLink} from 'react-router-dom';\r\n\r\nfunction ProfileP () {\r\n    return(\r\n        <div className=\"MainButtons\">\r\n        <header >\r\n            <nav >\r\n                <ul>\r\n                    <li>< NavLink to={{\r\n                        pathname: '/profile'\r\n                    }}>Home</ NavLink></li>\r\n\r\n                    <li><NavLink to={{\r\n                        pathname: '/register'\r\n                    }}>Settings</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n        </div>\r\n            \r\n    );\r\n    \r\n}\r\nexport default ProfileP;","import React from 'react';\r\nimport '../../css/Register.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Redirect, NavLink} from 'react-router-dom';\r\nimport { Route } from 'react-router-dom';\r\n\r\nfunction Register() {\r\n    return(\r\n        <div >\r\n            <header className=\"MainButtons\">\r\n            <nav >\r\n                <ul className=\"LinkElements\">\r\n                    <li>< NavLink className=\"mainLink\" to={{\r\n                        pathname: '/main'\r\n                    }}>Home</ NavLink></li>\r\n\r\n                    <li><NavLink className=\"mainLink\" to={{\r\n                        pathname: '/Login'\r\n                    }}>Login</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n\r\n        <div className=\"container\">\r\n            <form id =\"RegisterForm\" className=\"form-horizontal\">\r\n                <div id=\"RegisterElements\" className=\"row\">\r\n                <div className=\"TextForRegister\">\r\n                    <p>Indulge in an exciting experence </p>\r\n                    <p>by becoming a memeber of</p>\r\n                    <p>the recipe family</p>\r\n                </div>\r\n                <div id=\"FirstName\" className=\"form-group col-md-4\">\r\n                        <label>First Name</label>\r\n                        <input className=\"form-control input-lg\" placeholder=\"first name\" /> \r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                        <label>Last Name</label>\r\n                        <input className=\"form-control input-lg\" placeholder=\"last name\" /> \r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                        <label>User Name</label>\r\n                        <input className=\"form-control input-lg\" placeholder=\"user name\" /> \r\n                    </div>\r\n                    <div className=\"form-group col-md-4\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Email address </label>\r\n                        <input type=\"email\" className=\"form-control input-lg\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\r\n                        <small id=\"emailHelp\" className=\"form-text text-muted\"></small>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group col-md-4\">\r\n                        <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                        <input type=\"password\" className=\"form-control input-lg\" id=\"exampleInputPassword1\" placeholder=\"Password\" /> \r\n                        <button id=\"SubmitButton\" type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </div> \r\n                </div>\r\n    \r\n            </form>       \r\n        </div> \r\n                    <div className=\"SpaceNeededDiv\">\r\n\r\n                    </div>\r\n\r\n        </div>\r\n        \r\n    );\r\n    \r\n}\r\nexport default Register;","import axios from \"axios\";\r\n\r\nexport const axiosConfg = axios.create({\r\n    baseURL: 'http://localhost:8080/project2/'\r\n});\r\n\r\nexport default axiosConfg;","import  axiosConfig  from \"./axiosConfig\";\r\nimport { IPost } from \"../model/IPost\";\r\nimport IUser from \"../model/IUser\";\r\nimport { ILike } from \"../model/ILike\";\r\nimport { IComment } from \"../model/IComment\";\r\n\r\nexport const getList = () =>{\r\n    return axiosConfig.get(\"list.app\");\r\n}\r\n\r\nexport const publishPost = (body: IPost) => {\r\n    return axiosConfig.post('add.app',body);\r\n}\r\n\r\nexport const authenticateUser = (body: IUser) => {\r\n    return axiosConfig.post('auth.app', body);\r\n}\r\n\r\nexport const hitLike = (body: ILike) => {\r\n    return axiosConfig.post('like.app', body);\r\n}\r\n\r\nexport const postComment = (body: IComment) => {\r\n    return axiosConfig.post('cmnt.app', body);\r\n}\r\n","import React from 'react';\r\nimport '../../css/Main.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Redirect, Route, NavLink} from 'react-router-dom';\r\nimport { render } from '@testing-library/react';\r\nimport { authenticateUser } from '../../utilities/api';\r\n\r\n\r\nfunction Login(){\r\n    return(\r\n        <div >\r\n        <header className=\"MainButtons\">\r\n            <nav >\r\n                <ul className=\"LinkElements\">\r\n                    <li>< NavLink className=\"mainLink\" to={{\r\n                        pathname: '/main'\r\n                    }}>Home</ NavLink></li>\r\n                <li><NavLink className=\"mainLink\" to={{\r\n                        pathname: '/register'\r\n                    }}>Register</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n        <div className=\"container\">\r\n          \r\n            <form id =\"LoginForm\" className=\"form-horizontal\" onSubmit={()=>authenticateUser}>   \r\n                <div id=\"LoginElements\" className=\"row\">\r\n                <div className=\"TextForLogin\">\r\n                    <p>Share your favorite recipies </p>\r\n                    <p>with friends and family</p>\r\n                </div>\r\n                    <div className=\"form-group col-md-4\">\r\n                        <label id=\"EmailInput\" htmlFor=\"exampleInputEmail1\">Email address </label>\r\n                        <input type=\"email\" className=\"form-control input-lg\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\r\n                        <small id=\"emailHelp\" className=\"form-text text-muted\"></small>\r\n                    </div>\r\n                    <div className=\"form-group col-md-4\">\r\n                        <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                        <input type=\"password\"className=\"form-control input-lg\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\r\n                        <button onClick={toProfileP} id=\"SubmitButton\" type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nfunction toProfileP (){\r\n \r\n}\r\n\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport MainPage from './components/main-page-component/MainPage.tsx'\r\nimport HomeP from './components/home-page-component/HomePageComponent.tsx'\r\nimport ProfileP from './components/profile-page-component/ProfilePageComponent.tsx'\r\nimport Register from './components/registration-component/RegistrationComponent.tsx'\r\nimport Login from './components/login-component/LoginComponent.tsx'\r\nimport {BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport {Links} from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\"> \r\n      <Route path=\"/\" exact component={MainPage} />\r\n      <Switch>\r\n       <MainPage path=\"/main\" component={MainPage} />\r\n       <Login path=\"/Login\" component={Login} />\r\n        <HomeP path=\"/homeP\" component={HomeP} />\r\n        <ProfileP path=\"/profile\" component={ProfileP} />\r\n        <Register path=\"/register\" component={Register} />\r\n        </Switch> \r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}